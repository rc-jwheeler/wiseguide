WiseGuide is a CRM for rider training programs, such as
RideWise

http://www.rideconnection.org/ride/Services/RideWise.aspx

Funding is provided by Ride Connection, and software development
by OpenPlans.

-----------------------

Development Environment
=======================

If you already have RVM installed, CD in to the wiseguide project directory and
accept the RVM prompt. You may be prompted to install the required Ruby
version, too. Once that is all set, install the bundler gem then skip to the
"Install dependencies" step.

Install RVM
-----------

RVM is a ruby package manager that keeps all the ruby packages for a
given project isolated in a single environment.  It's extremely useful
for locking down the environment for your project.  To learn more, check
out: http://beginrescueend.com/rvm/

To install rvm, run these two commands:

  $ bash < <(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer )
  $ echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # Load RVM function' >> ~/.bash_profile

Open a fresh terminal (or re-source your .bash_profile), cd to the wiseguide
project directory, and answer 'yes' to the RVM prompt.

Install dependencies
--------------------

Now that you're in a fresh RVM environment, you can:

  $ bundle install

Copy config/database.yml.example to database.yml and tweak to suit your
needs.  (It works out of the box if you're working with SQLite. Fuzzy
matching is not present in SQLite, however.)

Copy config/app_config_template.yml to app_config.yml and tweak to suit
your needs. (You will want to put your email address in there at least.)

Bootstrap environment
---------------------

Populate the database:

  $ bundle exec rake db:setup

In a development environment, you can load some fake sandbox data with:

  $ bundle exec rake db:sandbox:load

It will create (among other things) an initial admin account, so you can login
as 'admin@rideconnection.org' with password 'password 1'.
 
That's it!  You can now run a test server with "rails s" or run the tests.

Resetting the development database
----------------------

In the event you need to reset the database, the following command will perform
all of the necessary steps:

  $ bundle exec rake db:drop:all; bundle exec rake db:create:all; bundle exec rake db:migrate; bundle exec rake db:seed; bundle exec rake db:sandbox:load; bundle exec rake db:test:prepare

Testing
=======

We are using Rspec for unit testing and cucumber for integration and functional
testing. You can run them using the following commands:

  $ bundle exec rake test
  $ bundle exec rake cucumber

Speeding up your tests
----------------------

The spork gem has been included and preconfigured in order to help speed up the 
execution of tests. If you are only going to be running the test suite once or 
need to setup a CI server, you won't want to use spork. But if you will be
running tests frequently, while developing a new feature or refactoring, etc., 
then preloading your test environment into spork will save you a few seconds 
or minutes per test execution. To use spork while testing, first boot up spork:

  $ bundle exec spork
  
for Rspec tests, or 
  
  $ bundle exec spork cucumber
  
for running Cucumber features. Note that these two servers can be run in the 
background simultaneously as they use different ports. Then to run your tests
within the spork environment:

  $ bundle exec rspec [path_to_your_spec(s)] --drb

or

  $ bundle exec cucumber [path_to_your_feature(s)] --drb
  
Note that because spork preloads your environment, you will have to restart the
spork server anytime you modify your model or configuration files, or anything
else that will be cached by the Rails server.

See also http://chrismdp.github.com/2010/11/getting-spork-working-now-on-rails-3-rspec-2-and-cucumber/
and http://opinionatedprogrammer.com/2011/02/profiling-spork-for-faster-start-up-time/.

Deployment
==========

There are two different deployment environments: staging and production.
Staging runs the master branch, to test the latest features that have been
developed.  Production runs the stable branch, which should contain commits
that have been tested on staging successfully.

To deploy, run: cap [staging|production] deploy

Postgres Notes
==============

To set up postgres for use with WiseGuide, you will need the
fuzzystrmatch library (included in postgresql-contrib-8.4 in Ubuntu).
This adds support for dmetaphone, which is how we
phonetically match names.  Run psql and then the following command:

\i /opt/local/share/postgresql84/contrib/fuzzystrmatch.sql 
