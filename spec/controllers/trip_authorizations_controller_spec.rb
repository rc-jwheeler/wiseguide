require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TripAuthorizationsController do

  before(:each) do
    @request.env["devise.mapping"] = Devise.mappings[:admin]
    @admin = FactoryGirl.create(:admin)
    sign_in @admin
  end

  # This should return the minimal set of attributes required to create a valid
  # TripAuthorization. As you add validations to TripAuthorization, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      allowed_trips_per_month: 1,
      start_date:              Date.current,
      kase_id:                 1,
    }
  end
  
  describe "GET index" do
    it "assigns all trip_authorizations as @trip_authorizations" do
      trip_authorization = TripAuthorization.create! valid_attributes
      get :index, {}
      assigns(:trip_authorizations).should eq([trip_authorization])
    end
  end

  describe "GET show" do
    it "assigns the requested trip_authorization as @trip_authorization" do
      trip_authorization = TripAuthorization.create! valid_attributes
      get :show, {:id => trip_authorization.to_param}
      assigns(:trip_authorization).should eq(trip_authorization)
    end
  end

  describe "GET new" do
    it "assigns a new trip_authorization as @trip_authorization" do
      get :new, {}
      assigns(:trip_authorization).should be_a_new(TripAuthorization)
    end
  end

  describe "GET edit" do
    it "assigns the requested trip_authorization as @trip_authorization" do
      trip_authorization = TripAuthorization.create! valid_attributes
      get :edit, {:id => trip_authorization.to_param}
      assigns(:trip_authorization).should eq(trip_authorization)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new TripAuthorization" do
        expect {
          post :create, {:trip_authorization => valid_attributes}
        }.to change(TripAuthorization, :count).by(1)
      end

      it "assigns a newly created trip_authorization as @trip_authorization" do
        post :create, {:trip_authorization => valid_attributes}
        assigns(:trip_authorization).should be_a(TripAuthorization)
        assigns(:trip_authorization).should be_persisted
      end

      it "redirects to the created trip_authorization" do
        post :create, {:trip_authorization => valid_attributes}
        response.should redirect_to(TripAuthorization.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved trip_authorization as @trip_authorization" do
        # Trigger the behavior that occurs when invalid params are submitted
        TripAuthorization.any_instance.stub(:save).and_return(false)
        post :create, {:trip_authorization => {}}
        assigns(:trip_authorization).should be_a_new(TripAuthorization)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        TripAuthorization.any_instance.stub(:save).and_return(false)
        post :create, {:trip_authorization => {}}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested trip_authorization" do
        trip_authorization = TripAuthorization.create! valid_attributes
        # Assuming there are no other trip_authorizations in the database, this
        # specifies that the TripAuthorization created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        TripAuthorization.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => trip_authorization.to_param, :trip_authorization => {'these' => 'params'}}
      end

      it "assigns the requested trip_authorization as @trip_authorization" do
        trip_authorization = TripAuthorization.create! valid_attributes
        put :update, {:id => trip_authorization.to_param, :trip_authorization => valid_attributes}
        assigns(:trip_authorization).should eq(trip_authorization)
      end

      it "redirects to the trip_authorization" do
        trip_authorization = TripAuthorization.create! valid_attributes
        put :update, {:id => trip_authorization.to_param, :trip_authorization => valid_attributes}
        response.should redirect_to(trip_authorization)
      end
    end

    describe "with invalid params" do
      it "assigns the trip_authorization as @trip_authorization" do
        trip_authorization = TripAuthorization.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        TripAuthorization.any_instance.stub(:save).and_return(false)
        put :update, {:id => trip_authorization.to_param, :trip_authorization => {}}
        assigns(:trip_authorization).should eq(trip_authorization)
      end

      it "re-renders the 'edit' template" do
        trip_authorization = TripAuthorization.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        TripAuthorization.any_instance.stub(:save).and_return(false)
        put :update, {:id => trip_authorization.to_param, :trip_authorization => {}}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested trip_authorization" do
      trip_authorization = TripAuthorization.create! valid_attributes
      expect {
        delete :destroy, {:id => trip_authorization.to_param}
      }.to change(TripAuthorization, :count).by(-1)
    end

    it "redirects to the trip_authorizations list" do
      trip_authorization = TripAuthorization.create! valid_attributes
      delete :destroy, {:id => trip_authorization.to_param}
      response.should redirect_to(trip_authorizations_url)
    end
  end
  
  describe "PUT complete_disposition" do
    it "updates the disposition fields of the requested trip_authorization" do
      trip_authorization = TripAuthorization.create! valid_attributes
      # Assuming there are no other trip_authorizations in the database, this
      # specifies that the TripAuthorization created on the previous line
      # receives the :update_attributes message with whatever params are
      # submitted in the request.
      TripAuthorization.any_instance.should_receive(:complete_disposition).with(@admin)
      put :complete_disposition, {:id => trip_authorization.to_param}
    end

    it "assigns the requested trip_authorization as @trip_authorization" do
      trip_authorization = TripAuthorization.create! valid_attributes
      put :complete_disposition, {:id => trip_authorization.to_param}
      assigns(:trip_authorization).should eq(trip_authorization)
    end

    it "redirects to the trip_authorization" do
      trip_authorization = TripAuthorization.create! valid_attributes
      put :complete_disposition, {:id => trip_authorization.to_param}
      response.should redirect_to(trip_authorization)
    end
  end
end
